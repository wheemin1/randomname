import { Handler } from "@netlify/functions";

// Korean Dictionary API configuration
const DICTIONARY_API_BASE_URL = "https://stdict.korean.go.kr/api/search.do";
const DICTIONARY_API_KEY = "4F4CF13529EABE510F4D67ACA4557923";

// Dictionary API response interface
interface DictionaryResponse {
  channel: {
    title: string;
    link: string;
    description: string;
    lastbuilddate: string;
    total: number;
    start: number;
    num: number;
    item?: DictionaryItem[];
  };
}

interface DictionaryItem {
  target_code: number;
  word: string;
  sup_no: number;
  pos: string;
  sense: {
    definition: string;
    link: string;
    type: string;
  };
}

// Sample English words for fallback
const sampleEnglishWords = {
  2: ["sky", "sea", "sun", "moon", "star", "tree", "bird", "fish", "fire", "wind", "rain", "snow", "rock", "leaf", "rose", "blue", "red", "gold", "ice", "gem"],
  3: ["sky", "sea", "sun", "moon", "star", "tree", "bird", "fish", "fire", "wind", "rain", "snow", "rock", "leaf", "rose", "blue", "red", "gold", "ice", "gem"],
  4: ["azure", "ocean", "sunny", "lunar", "starry", "woody", "avian", "aqua", "flame", "windy", "rainy", "snowy", "rocky", "green", "rosy", "blue", "ruby", "gold", "frost", "jewel"],
  5: ["azure", "ocean", "sunny", "lunar", "starry", "woody", "avian", "aqua", "flame", "windy", "rainy", "snowy", "rocky", "green", "rosy", "blue", "ruby", "gold", "frost", "jewel"],
  6: ["azured", "oceanic", "sunlit", "moonlit", "starlit", "wooded", "birdie", "aquatic", "flamed", "breezy", "rainy", "snowy", "rocky", "leafy", "rosy", "blued", "ruby", "golden", "frosty", "jeweled"],
};

async function fetchFromDictionaryAPI(length: number, type: string): Promise<string[]> {
  // For english words, return sample data
  if (type === "english") {
    const words = sampleEnglishWords[length as keyof typeof sampleEnglishWords] || [];
    return words;
  }

  // For Korean words, use the actual dictionary API
  try {
    const words: string[] = [];
    let start = 1;
    const maxResults = 500; // Get more results to filter by length
    
    // Common Korean syllables and particles to search for words
    const searchTerms = [
      "가", "나", "다", "라", "마", "바", "사", "아", "자", "차", "카", "타", "파", "하",
      "게", "네", "데", "레", "메", "베", "세", "에", "제", "체", "케", "테", "페", "헤",
      "고", "노", "도", "로", "모", "보", "소", "오", "조", "초", "코", "토", "포", "호",
      "구", "누", "두", "루", "무", "부", "수", "우", "주", "추", "쿠", "투", "푸", "후",
      "그", "느", "드", "르", "므", "브", "스", "으", "즈", "츠", "크", "트", "프", "흐"
    ];
    
    // Get words from multiple search terms
    for (const term of searchTerms.slice(0, 10)) { // Limit to first 10 terms
      try {
        const url = new URL(DICTIONARY_API_BASE_URL);
        url.searchParams.set("key", DICTIONARY_API_KEY);
        url.searchParams.set("q", term);
        url.searchParams.set("req_type", "json");
        url.searchParams.set("start", start.toString());
        url.searchParams.set("num", "100");
        url.searchParams.set("advanced", "y");
        url.searchParams.set("method", "start");
        url.searchParams.set("letter_s", length.toString());
        url.searchParams.set("letter_e", length.toString());
        
        // Set type based on parameter
        if (type === "pure") {
          url.searchParams.set("type2", "native"); // 고유어
        } else if (type === "korean") {
          url.searchParams.set("type2", "native,chinese"); // 고유어 + 한자어
        }
        
        const response = await fetch(url.toString());
        
        if (!response.ok) {
          console.error(`Dictionary API error: ${response.status}`);
          continue;
        }
        
        const data: DictionaryResponse = await response.json();
        
        if (data.channel?.item) {
          for (const item of data.channel.item) {
            if (item.word && item.word.length === length) {
              // Filter out words with numbers or special characters
              if (/^[가-힣]+$/.test(item.word)) {
                words.push(item.word);
              }
            }
          }
        }
        
        // Break if we have enough words
        if (words.length >= maxResults) break;
        
        // Small delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`Error fetching from dictionary API with term ${term}:`, error);
        continue;
      }
    }
    
    // Remove duplicates and return
    const uniqueWords = [...new Set(words)];
    return uniqueWords;
    
  } catch (error) {
    console.error("Dictionary API error:", error);
    // Return empty array if API fails
    return [];
  }
}

export const handler: Handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, OPTIONS',
    'Cache-Control': 'public, max-age=3600', // 1 hour cache for dictionary results
  };

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: '',
    };
  }

  if (event.httpMethod !== 'GET') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  const params = event.queryStringParameters || {};
  const length = parseInt(params.length || '3');
  const type = params.type || 'korean';
  const count = parseInt(params.count || '100');

  if (length < 2 || length > 6) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Length must be between 2 and 6' }),
    };
  }

  if (!['korean', 'pure', 'english'].includes(type)) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Type must be korean, pure, or english' }),
    };
  }

  try {
    const words = await fetchFromDictionaryAPI(length, type);
    
    if (words.length === 0) {
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({
          words: [],
          message: 'No words found for the specified criteria',
          length,
          type,
        }),
      };
    }
    
    // Shuffle and limit results
    const shuffled = words.sort(() => Math.random() - 0.5);
    const limited = shuffled.slice(0, count);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        words: limited,
        total: words.length,
        returned: limited.length,
        length,
        type,
      }),
    };
  } catch (error) {
    console.error('Dictionary API error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: 'Failed to fetch dictionary words',
        message: error instanceof Error ? error.message : 'Unknown error'
      }),
    };
  }
};
        length,
        type,
        count: limited.length,
        timestamp: new Date().toISOString(),
      }),
    };
  } catch (error) {
    console.error('Dictionary API error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error' }),
    };
  }
};
